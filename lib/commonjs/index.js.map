{"version":3,"sources":["index.tsx"],"names":["styles","con","flex","backgroundColor","PullToRefresh","props","containerTranslateY","innerScrollTop","headerRef","containerTopChange","value","setProgress","pullDistance","percent","refreshTriggerHeight","headerHeight","innerScrollCallback","event","nativeEvent","contentOffset","y","state","containerTop","Animated","Value","addListener","onMoveShouldSetResponder","bind","onResponderGrant","onResponderReject","onPanResponderMove","onPanResponderRelease","onPanResponderTerminate","_panResponder","PanResponder","create","onMoveShouldSetPanResponder","onPanResponderGrant","onPanResponderReject","onPanResponderTerminationRequest","evt","gestureState","refreshing","topPullThreshold","dy","Math","max","setValue","threshold","onRefresh","_resetContainerPosition","timing","toValue","duration","useNativeDriver","start","prevProps","prevState","holdHeight","refreshingHoldHeight","removeAllListeners","style","position","left","width","top","transform","translateY","divide","Header","HeaderComponent","c","child","React","cloneElement","children","onScroll","bounces","alwaysBounceVertical","panHandlers","renderHeader","Component","defaultProps"],"mappings":"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","sourcesContent":["/**\n * Container for ScrollView/FlatList, providing custom pull-to-refresh Header support\n */\n\nimport React, { Component, ComponentType, RefAttributes } from \"react\";\nimport {\n  View,\n  ViewStyle,\n  Animated,\n  PanResponder,\n  PanResponderInstance,\n  GestureResponderEvent,\n  PanResponderGestureState,\n  NativeSyntheticEvent,\n  NativeScrollEvent\n} from \"react-native\";\n\nexport interface PullToRefreshHeaderProps {\n  // 当前下拉的距离，也穿给header，方便组件内部进行各种自定义计算\n  pullDistance: number;\n  // 当前下拉的百分比 [0, 1]\n  percentAnimatedValue: Animated.AnimatedDivision;\n  // 下拉百分比 [0, 1] 因为percentAnimatedValue 不能直接读取当前值，需要给header直接一个当前比例，方便内部处理\n  percent: number;\n  // 当前是否正在刷新中\n  refreshing: boolean;\n}\n\nexport interface Props {\n  // 容器样式\n  style: ViewStyle;\n  // 下拉刷新的header组件类\n  HeaderComponent: ComponentType<PullToRefreshHeaderProps & RefAttributes<any>>;\n  // Header 组件的高度，也是触发刷新的下拉距离\n  headerHeight: number;\n  // 下拉过程中，可以触发刷新的下拉距离。不穿，则默认等于 headerHeight\n  refreshTriggerHeight?: number;\n  // 正在刷新时，容器保持的顶部距离，如果用户不传，则默认等于 headerHeight\n  refreshingHoldHeight?: number;\n  // 当前是否正在下拉刷新请求数据中\n  refreshing: boolean;\n  // 下拉刷新达到阈值时，回调父级\n  onRefresh: () => void;\n  // 子组件，只能是  ScrollView/FlatList 等\n  children: JSX.Element;\n  // 内部滚动组件，contentOffset.y <= topPullThreshold 时，触发顶部的下拉刷新动作\n  topPullThreshold: number;\n}\n\ninterface State {\n  // 容器顶部的偏移距离\n  containerTop: Animated.Value;\n}\n\nconst styles = {\n  con: {\n    flex: 1,\n    // Android上，不设置这个背景色，貌似会触发  onPanResponderTerminate ！！！\n    backgroundColor: \"#fff\"\n  } as ViewStyle\n};\n\nexport default class PullToRefresh extends Component<Props, State> {\n  static defaultProps = {\n    style: styles.con,\n    refreshing: false,\n    topPullThreshold: 2\n  };\n\n  // 当前容器移动的距离\n  containerTranslateY: number = 0;\n\n  // 内部scroll容器顶部滚动的距离\n  innerScrollTop: number = 0;\n\n  // 容器上的 PanResponder\n  _panResponder: PanResponderInstance;\n\n  // header 组件的引用\n  headerRef: any = null;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      // 容器偏离顶部的距离\n      containerTop: new Animated.Value(0)\n    };\n\n    this.state.containerTop.addListener(this.containerTopChange);\n\n    // this.onStartShouldSetResponder = this.onStartShouldSetResponder.bind(this);\n    this.onMoveShouldSetResponder = this.onMoveShouldSetResponder.bind(this);\n    this.onResponderGrant = this.onResponderGrant.bind(this);\n    this.onResponderReject = this.onResponderReject.bind(this);\n    this.onPanResponderMove = this.onPanResponderMove.bind(this);\n    this.onPanResponderRelease = this.onPanResponderRelease.bind(this);\n    this.onPanResponderTerminate = this.onPanResponderTerminate.bind(this);\n\n    this._panResponder = PanResponder.create({\n      // onStartShouldSetPanResponder: this.onStartShouldSetResponder,\n      onMoveShouldSetPanResponder: this.onMoveShouldSetResponder,\n      onPanResponderGrant: this.onResponderGrant,\n      onPanResponderReject: this.onResponderReject,\n      onPanResponderMove: this.onPanResponderMove,\n      onPanResponderRelease: this.onPanResponderRelease,\n      onPanResponderTerminationRequest: (evt, gestureState) => {\n        return true;\n      },\n      onPanResponderTerminate: this.onPanResponderTerminate\n    });\n  }\n\n  // onStartShouldSetResponder(event, gestureState) {\n  //     console.log('onStartShouldSetResponder', gestureState);\n  //     return false;\n  // }\n\n  onMoveShouldSetResponder(\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ) {\n    if (this.props.refreshing) {\n      // 正在刷新中，不接受再次下拉\n      return false;\n    }\n    if (\n      this.innerScrollTop <= this.props.topPullThreshold &&\n      gestureState.dy > 20\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  onResponderGrant(\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ) {}\n\n  onResponderReject(\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ) {}\n\n  onPanResponderMove(\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ) {\n    const dy = Math.max(0, gestureState.dy);\n    this.state.containerTop.setValue(dy);\n  }\n\n  onPanResponderRelease(\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ) {\n    // 判断是否达到了触发刷新的条件\n    const threshold =\n      this.props.refreshTriggerHeight || this.props.headerHeight;\n    if (this.containerTranslateY >= threshold) {\n      // 触发刷新\n      this.props.onRefresh();\n    } else {\n      // 没到刷新的位置，回退到顶部\n      this._resetContainerPosition();\n    }\n  }\n\n  onPanResponderTerminate(\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ) {\n    this._resetContainerPosition();\n  }\n\n  _resetContainerPosition() {\n    Animated.timing(this.state.containerTop, {\n      toValue: 0,\n      duration: 250,\n      useNativeDriver: true\n    }).start();\n  }\n\n  // 下拉容器的过程中，动态传递下拉的距离给 header 组件，直接调用方法，不走本组件的 setState，避免卡顿\n  containerTopChange = ({ value }: { value: number }) => {\n    this.containerTranslateY = value;\n    if (this.headerRef) {\n      this.headerRef.setProgress({\n        pullDistance: value,\n        percent:\n          value / (this.props.refreshTriggerHeight || this.props.headerHeight)\n      });\n    }\n  };\n\n  innerScrollCallback = (event: NativeSyntheticEvent<NativeScrollEvent>) => {\n    this.innerScrollTop = event.nativeEvent.contentOffset.y;\n  };\n\n  componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>) {\n    if (!prevProps.refreshing && this.props.refreshing) {\n      // 从 未加载 变化到 加载中\n      const holdHeight =\n        this.props.refreshingHoldHeight || this.props.headerHeight;\n      Animated.timing(this.state.containerTop, {\n        toValue: holdHeight,\n        duration: 150,\n        useNativeDriver: true\n      }).start();\n    } else if (prevProps.refreshing && !this.props.refreshing) {\n      // 从 加载中 变化到 未加载\n      Animated.timing(this.state.containerTop, {\n        toValue: 0,\n        duration: 250,\n        useNativeDriver: true\n      }).start();\n    }\n  }\n\n  componentWillUnmount() {\n    this.state.containerTop.removeAllListeners();\n  }\n\n  renderHeader() {\n    const style = {\n      position: \"absolute\",\n      left: 0,\n      width: \"100%\",\n      top: -this.props.headerHeight,\n      transform: [{ translateY: this.state.containerTop }]\n    };\n    const percent = Animated.divide(\n      this.state.containerTop,\n      this.props.refreshTriggerHeight || this.props.headerHeight\n    );\n    const Header = this.props.HeaderComponent;\n    return (\n      <Animated.View style={style}>\n        <Header\n          ref={(c: any) => {\n            this.headerRef = c;\n          }}\n          percentAnimatedValue={percent}\n          pullDistance={this.containerTranslateY}\n          percent={this.containerTranslateY / this.props.headerHeight}\n          refreshing={this.props.refreshing}\n        />\n      </Animated.View>\n    );\n  }\n\n  render() {\n    const child = React.cloneElement(this.props.children, {\n      onScroll: this.innerScrollCallback,\n      bounces: false,\n      alwaysBounceVertical: false\n    });\n    return (\n      <View style={this.props.style} {...this._panResponder.panHandlers}>\n        <Animated.View\n          style={[\n            { flex: 1, transform: [{ translateY: this.state.containerTop }] }\n          ]}\n        >\n          {child}\n        </Animated.View>\n        {this.renderHeader()}\n      </View>\n    );\n  }\n}\n"]}